import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from growwapi import GrowwAPI
import numpy as np
from functools import lru_cache
import subprocess
import sys

# === Page Setup ===
st.set_page_config(page_title="Trading Signal Predictor", layout="wide")
st.title("📈 Trading Signal Predictor")
st.write("🔄 Initializing…")

# === Groww API Auth ===
st.sidebar.title("🔐 Groww API Auth")
api_key = st.sidebar.text_input("Enter your Groww API token", type="password")
st.write("🔑 API key present?", bool(api_key))
if not api_key:
    st.warning("Please enter your Groww API token in the sidebar.")
    st.stop()

groww = GrowwAPI(api_key)

# === Instrument Load ===
@lru_cache(maxsize=1)
def load_instruments():
    try:
        df = pd.read_csv("instruments.csv", low_memory=False)
        st.write("✅ Loaded instruments.csv:", df.shape)
    except Exception as e:
        st.error(f"❌ instruments.csv load failed: {e}")
        raise
    groww.instruments = df
    groww._load_instruments = lambda: None
    groww._download_and_load_instruments = lambda: df
    groww.get_instrument_by_groww_symbol = lambda sym: df[df['groww_symbol'] == sym].iloc[0].to_dict()
    return df

try:
    instruments_df = load_instruments()
except:
    st.stop()

# === Load Models ===
try:
    from strategy_1_model import buy_model, rr_model, compute_rsi
    st.write("✅ Models imported successfully")
except Exception as e:
    st.error(f"❌ Model import error: {e}")
    st.stop()

# === Show Strategy Guide ===
def show_guide():
    st.title("📘 Strategy Guide – Signal Confidence Strength")
    st.markdown("""
    This section explains how to interpret the **confidence score** and resulting labels generated by the trading signal model.

    ### 🔍 How Confidence Works:
    - The model outputs a probability that a candle is a **BUY signal**.
    - We translate this into **labels** for human-friendly interpretation.

    ### 🧠 Confidence Strength Breakdown

    | Confidence %       | Label              | Meaning                                  |
    |--------------------|--------------------|------------------------------------------|
    | **90–100%**        | 🔥 Strong BUY      | Very high conviction — ideal entry zone. |
    | **70–89.99%**      | ✅ Moderate BUY    | Good signal, with decent model backing.  |
    | **50–69.99%**      | ⚠️ Weak BUY        | Slight positive bias — wait for confirmation. |
    | **30–49.99%**      | ⚠️ Weak SELL       | Slight negative bias — stay cautious.    |
    | **10–29.99%**      | ❌ Moderate SELL   | Selling pressure likely — avoid buying.  |
    | **0–9.99%**        | 💀 Strong SELL     | Very bearish — exit or short if applicable. |

    ### 💡 Tips:
    - Combine this with technical indicators (RSI, MACD) for better decisions.
    - Use **Strong BUY** or **Strong SELL** as clear entry/exit zones.
    - For **Weak signals**, observe next candles or add filters.
    """)

# === Sidebar Nav ===
page = st.sidebar.radio("📚 Navigation", ["📈 Live Signal", "🧠 Retrain Model", "📘 Strategy Guide"])
strategy_option = st.sidebar.selectbox("🧪 Strategy", ["Strategy 1"], index=0)

# === Time Setup ===
start_time_ist = datetime(2025, 6, 10, 9, 15, tzinfo=ZoneInfo("Asia/Kolkata"))
end_time_ist = datetime.now(ZoneInfo("Asia/Kolkata"))
now_ist = end_time_ist

# Auto-refresh during market hours
if datetime.strptime("09:15", "%H:%M").time() <= now_ist.time() <= datetime.strptime("15:30", "%H:%M").time():
    st.markdown("<meta http-equiv='refresh' content='600'>", unsafe_allow_html=True)

# === Guide Page ===
if page == "📘 Strategy Guide":
    show_guide()
    st.stop()

# === Live Signal Page ===
if page == "📈 Live Signal":
    def live_predict(symbol="NSE-NIFTY", interval_minutes=10):
        st.subheader("📡 Fetching live data")
        st.write("• Symbol:", symbol)
        st.write("• Interval:", interval_minutes, "mins")

        try:
            sel = groww.get_instrument_by_groww_symbol(symbol)
            st.write("🧾 Instrument:", sel)
        except Exception as e:
            st.error(f"❌ Instrument lookup failed: {e}")
            return

        # Duration check to prevent API errors
        duration_minutes = (end_time_ist - start_time_ist).total_seconds() / 60
        safe_interval = max(interval_minutes, int(duration_minutes / 1400) + 1)

        try:
            raw = groww.get_historical_candle_data(
                trading_symbol=sel['trading_symbol'],
                exchange=sel['exchange'],
                segment=sel['segment'],
                start_time=start_time_ist.strftime("%Y-%m-%d %H:%M:%S"),
                end_time=end_time_ist.strftime("%Y-%m-%d %H:%M:%S"),
                interval_in_minutes=safe_interval
            )
        except Exception as e:
            st.error(f"❌ API call error: {e}")
            return

        candles = raw.get('candles') if isinstance(raw, dict) else None
        st.write("📊 Candle count:", len(candles) if candles else 0)

        if not candles:
            st.error("⚠️ No candle data returned.")
            return

        df = pd.DataFrame(candles, columns=['timestamp','open','high','low','close','volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='s', utc=True).dt.tz_convert('Asia/Kolkata')
        df.sort_values('timestamp', inplace=True)
        df.reset_index(drop=True, inplace=True)

        # Feature engineering
        df['SMA_10'] = df['close'].rolling(10).mean()
        df['EMA_10'] = df['close'].ewm(span=10, adjust=False).mean()
        df['Momentum'] = df['close'] - df['close'].shift(10)
        df['Volatility'] = df['close'].rolling(10).std()
        df['RSI'] = compute_rsi(df['close'])

        latest = df[['SMA_10','EMA_10','RSI','Momentum','Volatility']].dropna().tail(1)
        if latest.empty:
            st.warning("Not enough data to predict.")
            return

        try:
            proba = buy_model.predict_proba(latest)[0]
            rr_val = rr_model.predict(latest)[0]
        except Exception as e:
            st.error(f"❌ Prediction error: {e}")
            return

        conf = proba[1]*100
        buy = proba[1] > 0.5

        # Display
        st.subheader("📈 Prediction")
        st.write("• Last candle:", df['timestamp'].iloc[-1])
        st.write("• Signal:", "BUY" if buy else "HOLD/SELL")

        # Confidence Label
        if conf >= 90:
            label = "🔥 Strong BUY"
            color = "green"
        elif conf >= 70:
            label = "✅ Moderate BUY"
            color = "green"
        elif conf >= 50:
            label = "⚠️ Weak BUY"
            color = "orange"
        elif conf >= 30:
            label = "⚠️ Weak SELL"
            color = "orange"
        elif conf >= 10:
            label = "❌ Moderate SELL"
            color = "red"
        else:
            label = "💀 Strong SELL"
            color = "darkred"

        st.markdown(
            f"### 🎯 <b>Confidence:</b> <span style='color:{color}'>{conf:.2f}% - {label}</span>",
            unsafe_allow_html=True
        )

        st.markdown(f"### 📊 <b>Risk/Reward:</b> `{rr_val:.4f}`", unsafe_allow_html=True)
        st.dataframe(df.tail(10), use_container_width=True)

    # Run Live Prediction
    live_predict()

# === Retrain Model Page ===
if page == "🧠 Retrain Model":
    st.title("🧠 Retrain Trading Models")
    if st.button("🔁 Start Retraining"):
        st.info("📱 Starting retraining...")
        try:
            process = subprocess.Popen(
                [sys.executable, "strategy_1_retrain.py"],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True
            )
            output_area = st.empty()
            logs = ""

            for line in process.stdout:
                logs += line
                output_area.code(logs)

            process.wait()

            if process.returncode == 0:
                st.success("✅ Retraining complete!")
                st.rerun()
            else:
                st.error("❌ Retraining failed. Please check strategy_1_retrain.py.")
        except Exception as e:
            st.error(f"❌ Error during retraining: {e}")
